version: "2"

services:

  stockzilla-core-messagebus:
    container_name: stockzilla-core-messagebus
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/nats:1.0.0
    ports:
      - 5101:4222
      - 5102:6222
      - 5103:8222

  stockzilla-core-postgres:
    container_name: stockzilla-core-postgres
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/postgres:1.0.0
    ports:
      - 5104:5432
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: stockzilla

  stockzilla-core-mongo:
    container_name: stockzilla-core-mongo
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/mongo:1.0.0
    ports:
      - 5105:27017

  stockzilla-simulator-stock:
    container_name: stockzilla-simulator-stock
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/simulator-stock:0.0.4
    ports:
      - 5111:8085
    depends_on:
      - stockzilla-core-messagebus
    environment:
      natsHost: stockzilla-core-messagebus
      natsPort: 4222

  stockzilla-service-stock-trader:
    container_name: stockzilla-service-stock-trader
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/service-stock-trader:0.0.4
    ports:
      - 5112:8085
      - 5113:8086
    depends_on:
      - stockzilla-core-messagebus
      - stockzilla-core-postgres
    environment:
      dbUser: postgres
      dbPassword: admin
      dbName: stockzilla
      dbHost: stockzilla-core-postgres
      dbPort: 5432
      natsUrl: stockzilla-core-messagebus:4222

  stockzilla-service-mongo-engine:
    container_name: stockzilla-service-mongo-engine
    networks:
      - stockzilla
    restart: always
    image: docker.io/vickeyshrestha/ap0001_mongo_engine:00.00.07
    ports:
      - 5114:8085
    depends_on:
      - stockzilla-core-mongo
    environment:
      mongoHostAndPort: stockzilla-core-mongo:27017

  graphql-engine:
    image: hasura/graphql-engine:v2.35.0
    networks:
      - stockzilla
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:admin@stockzilla-core-postgres:5432/stockzilla
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:admin@stockzilla-core-postgres:5432/stockzilla
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.35.0
    restart: always
    networks:
      - stockzilla
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  # stockzilla-big-file:
  #   container_name: stockzilla-big-file
  #   networks:
  #     - stockzilla
  #   restarts: always
  #   image: docker.io/vickeyshrestha/stockzilla-big-file:0.0.1
  #   ports:
  #     - 5007: 8085
  #   depends_on:
  #     - stockzilla-sql
  #   environment:
  #     env: dev
  #     config_file: config

# Add any volumes here if required
volumes:
  stockzilla-sql:

networks:
  stockzilla:
    driver: "bridge"
      #ipam:
      # driver: default
    #config:
    # - subnet: 10.75.0.0/23
